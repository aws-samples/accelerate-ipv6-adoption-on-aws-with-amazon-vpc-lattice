AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC Infrastructure with IPv4/IPv6 Subnets, NAT Gateways, VPC Lattice, and EC2 Instances"

Parameters:
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"
    Description: "Latest Amazon Linux 2023 AMI"

Resources:

  # ---------- Security Groups ----------
  VPC1InstanceSecurityGroup:
    DependsOn: 
      - LatticeInfoFunction
      - LatticeInfoResource
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for VPC1 EC2 instances"
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - Description: Allow HTTP from VPC Lattice IPv4
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId: !GetAtt LatticeInfoResource.IPv4PrefixList
        - Description: Allow HTTP from VPC Lattice IPv6
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId: !GetAtt LatticeInfoResource.IPv6PrefixList
      SecurityGroupEgress:
        - Description: Allow HTTPS for downloading webserver httpd
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - Description: Allow HTTPS for downloading webserver httpd
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
        - Description: Allow HTTP to VPC Lattice IPv4
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          DestinationPrefixListId: !GetAtt LatticeInfoResource.IPv4PrefixList
        - Description: Allow HTTP to VPC Lattice IPv6
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          DestinationPrefixListId: !GetAtt LatticeInfoResource.IPv6PrefixList
      Tags:
        - Key: Name
          Value: VPC1-Instance-SG

  VPC1EndpointsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: 
      - NATGW1PrivateIP
      - NATGW2PrivateIP
    Properties:
      GroupDescription: "Security group for VPC1 VPC endpoints that allows HTTPS traffic from EC2 instances and NAT Gateway private IPs"
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - Description: Allow HTTPS from instances
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref VPC1InstanceSecurityGroup
        - Description: Allow HTTPS from VPC1NATGW1
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Sub "${NATGW1PrivateIP.PrivateIp}/32"
        - Description: Allow HTTPS from VPC1NATGW2
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Sub "${NATGW2PrivateIP.PrivateIp}/32"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
      Tags:
        - Key: Name
          Value: VPC1-Endpoints-SG

  VPC1LatticeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for VPC1 VPC Lattice service integration that allows HTTP/HTTPS traffic from EC2 instances and enables outbound HTTPS for service communication"
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - Description: Allow HTTP from instances
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref VPC1InstanceSecurityGroup
        - Description: Allow HTTPS from instances
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref VPC1InstanceSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
      Tags:
        - Key: Name
          Value: VPC1-Lattice-SG

  VPC2InstanceSecurityGroup:
    DependsOn: 
      - LatticeInfoFunction
      - LatticeInfoResource
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for VPC2 EC2 instances"
      VpcId: !Ref VPC2
      SecurityGroupIngress:
        - Description: Allow HTTP from VPC Lattice IPv4
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId: !GetAtt LatticeInfoResource.IPv4PrefixList
        - Description: Allow HTTP from VPC Lattice IPv6
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId: !GetAtt LatticeInfoResource.IPv6PrefixList
      SecurityGroupEgress:
        - Description: Allow HTTP for downloading webserver httpd
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - Description: Allow HTTP for downloading webserver httpd
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0        
        - Description: Allow HTTP to VPC Lattice IPv4PrefixList
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          DestinationPrefixListId: !GetAtt LatticeInfoResource.IPv4PrefixList
        - Description: Allow HTTP to VPC Lattice IPv6PrefixList
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          DestinationPrefixListId: !GetAtt LatticeInfoResource.IPv6PrefixList
      Tags:
        - Key: Name
          Value: VPC2-Instance-SG

  VPC2EndpointsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: 
      - NATGW3PrivateIP
      - NATGW4PrivateIP
    Properties:
      GroupDescription: "Security group for VPC2 VPC endpoints that allows HTTPS traffic from EC2 instances and NAT Gateway private IPs"
      VpcId: !Ref VPC2
      SecurityGroupIngress:
        - Description: Allow HTTPS from instances
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref VPC2InstanceSecurityGroup
        - Description: Allow HTTPS from VPC2NATGW1
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Sub "${NATGW3PrivateIP.PrivateIp}/32"
        - Description: Allow HTTPS from VPC2NATGW2
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Sub "${NATGW4PrivateIP.PrivateIp}/32"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
      Tags:
        - Key: Name
          Value: VPC2-Endpoints-SG

  VPC2LatticeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for VPC2 VPC Lattice service integration that allows HTTP/HTTPS traffic from EC2 instances and enables outbound HTTPS for service communication"
      VpcId: !Ref VPC2
      SecurityGroupIngress:
        - Description: Allow HTTP from instances
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref VPC2InstanceSecurityGroup
        - Description: Allow HTTPS from instances
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref VPC2InstanceSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
      Tags:
        - Key: Name
          Value: VPC2-Lattice-SG

  # ---------- VPCs and IPv6 CIDRs ----------
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: VPC-1

  VPC1IPv6CIDR:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC1

  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.2.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: VPC-2

  VPC2IPv6CIDR:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC2

  # ---------- Internet Gateways and Attachments ----------
  VPC1IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPC1-IGW

  VPC2IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPC2-IGW

  VPC1IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref VPC1IGW

  VPC2IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC2
      InternetGatewayId: !Ref VPC2IGW

  # ---------- Egress-Only Internet Gateways ----------
  VPC1EIGW:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      VpcId: !Ref VPC1

  VPC2EIGW:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      VpcId: !Ref VPC2

  # ---------- Route Tables ----------
  VPC1PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: VPC1-Public-RT

  VPC1IPv4OnlySubnetRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: VPC1-IPV4-RT-AZ1

  VPC1IPv6OnlySubnetRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: VPC1-IPV6-RT-AZ2

  VPC2PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: VPC2-Public-RT

  VPC2IPv4OnlySubnetRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: VPC2-IPV4-RT-AZ1

  VPC2DualStackSubnetRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: VPC2-DualStack-RT-AZ2

  # ---------- Elastic IPs for NAT Gateways ----------
  VPC1EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: VPC1-NAT-EIP1

  VPC1EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: VPC1-NAT-EIP2

  VPC2EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: VPC2-NAT-EIP1

  VPC2EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: VPC2-NAT-EIP2

  # ---------- Subnets ----------
  # VPC1 Public Subnets
  VPC1PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC1IPv6CIDR
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.1.10.0/24
      Ipv6CidrBlock: 
        Fn::Select: 
          - 0
          - Fn::Cidr: 
            - !Select [0, !GetAtt VPC1.Ipv6CidrBlocks]
            - 256
            - 64
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: VPC1-Public-Subnet-1

  VPC1PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC1IPv6CIDR
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.1.11.0/24
      Ipv6CidrBlock: 
        Fn::Select: 
          - 1
          - Fn::Cidr: 
            - !Select [0, !GetAtt VPC1.Ipv6CidrBlocks]
            - 256
            - 64
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: VPC1-Public-Subnet-2
    

  # VPC1 Private Subnets
  VPC1IPv4OnlySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.1.0.0/24
      Tags:
        - Key: Name
          Value: VPC1-IPv4-Only-Subnet

  VPC1IPv6OnlySubnet:
    Type: AWS::EC2::Subnet
    DependsOn: VPC1IPv6CIDR
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [1, !GetAZs ""]
      Ipv6Native: true
      EnableDns64: true
      Ipv6CidrBlock:
        Fn::Select: 
          - 2
          - Fn::Cidr: 
            - !Select [0, !GetAtt VPC1.Ipv6CidrBlocks]
            - 256
            - 64
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: VPC1-IPv6-Only-Subnet


  VPC1EndpointsSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC1IPv6CIDR
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.1.3.0/24
      Ipv6CidrBlock:
        Fn::Select: 
          - 3
          - Fn::Cidr: 
            - !Select [0, !GetAtt VPC1.Ipv6CidrBlocks]
            - 256
            - 64
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: VPC1-Endpoints-Subnet-1

  VPC1EndpointsSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC1IPv6CIDR
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.1.4.0/24
      Ipv6CidrBlock:
        Fn::Select: 
          - 4
          - Fn::Cidr: 
            - !Select [0, !GetAtt VPC1.Ipv6CidrBlocks]
            - 256
            - 64
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: VPC1-Endpoints-Subnet-2

  # VPC2 Public Subnets
  VPC2PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC2IPv6CIDR
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.2.1.0/24
      Ipv6CidrBlock: 
        Fn::Select: 
          - 0
          - Fn::Cidr: 
            - !Select [0, !GetAtt VPC2.Ipv6CidrBlocks]
            - 256
            - 64
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: VPC2-Public-Subnet-1

  VPC2PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC2IPv6CIDR
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.2.11.0/24
      Ipv6CidrBlock: 
        Fn::Select: 
          - 1
          - Fn::Cidr: 
            - !Select [0, !GetAtt VPC2.Ipv6CidrBlocks]
            - 256
            - 64
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: VPC2-Public-Subnet-2

  # VPC2 Private Subnets
  VPC2IPv4OnlySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.2.20.0/24
      Tags:
        - Key: Name
          Value: VPC2-IPv4-Only-Subnet

  VPC2DualStackSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: VPC2IPv6CIDR
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.2.10.0/24
      EnableDns64: true
      Ipv6CidrBlock: 
        Fn::Select: 
          - 2
          - Fn::Cidr: 
            - !Select [0, !GetAtt VPC2.Ipv6CidrBlocks]
            - 256
            - 64
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: VPC2DualStack-Subnet

  VPC2EndpointsSubnet1:
    DependsOn:
      - VPC2IPv6CIDR
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.2.3.0/24
      Ipv6CidrBlock: 
        Fn::Select: 
          - 3
          - Fn::Cidr: 
            - !Select [0, !GetAtt VPC2.Ipv6CidrBlocks]
            - 256
            - 64
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: VPC2-Endpoints-Subnet-1

  VPC2EndpointsSubnet2:
    DependsOn:
      - VPC2IPv6CIDR
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.2.4.0/24
      Ipv6CidrBlock: 
        Fn::Select: 
          - 4
          - Fn::Cidr: 
            - !Select [0, !GetAtt VPC2.Ipv6CidrBlocks]
            - 256
            - 64
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: VPC2-Endpoints-Subnet-2

  # ---------- NAT Gateways ----------
  VPC1NATGW1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VPC1EIP1.AllocationId
      SubnetId: !Ref VPC1PublicSubnet1
      Tags:
        - Key: Name
          Value: VPC1-NATGW-AZ1

  VPC1NATGW2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VPC1EIP2.AllocationId
      SubnetId: !Ref VPC1PublicSubnet2
      Tags:
        - Key: Name
          Value: VPC1-NATGW-AZ2

  VPC2NATGW1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VPC2EIP1.AllocationId
      SubnetId: !Ref VPC2PublicSubnet1
      Tags:
        - Key: Name
          Value: VPC2-NATGW-AZ1

  VPC2NATGW2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VPC2EIP2.AllocationId
      SubnetId: !Ref VPC2PublicSubnet2
      Tags:
        - Key: Name
          Value: VPC2-NATGW-AZ2


  # ---------- Route Table Associations ----------
  VPC1PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC1PublicSubnet1
      RouteTableId: !Ref VPC1PublicRouteTable

  VPC1PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC1PublicSubnet2
      RouteTableId: !Ref VPC1PublicRouteTable

  VPC1IPv4OnlySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC1IPv4OnlySubnet
      RouteTableId: !Ref VPC1IPv4OnlySubnetRouteTable1

  VPC1IPv6OnlySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC1IPv6OnlySubnet
      RouteTableId: !Ref VPC1IPv6OnlySubnetRouteTable2

  VPC2PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC2PublicSubnet1
      RouteTableId: !Ref VPC2PublicRouteTable

  VPC2PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC2PublicSubnet2
      RouteTableId: !Ref VPC2PublicRouteTable

  VPC2IPv4OnlySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC2IPv4OnlySubnet
      RouteTableId: !Ref VPC2IPv4OnlySubnetRouteTable1

  VPC2DualStackSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC2DualStackSubnet
      RouteTableId: !Ref VPC2DualStackSubnetRouteTable2

  # ---------- Routes ----------
  # VPC1 Public Routes
  VPC1PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPC1IGWAttachment
    Properties:
      RouteTableId: !Ref VPC1PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPC1IGW

  VPC1PublicDefaultIPv6Route:
    Type: AWS::EC2::Route
    DependsOn: VPC1IGWAttachment
    Properties:
      RouteTableId: !Ref VPC1PublicRouteTable
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref VPC1IGW

  # VPC1 Private Routes
  VPC1PrivateDefaultRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPC1IPv4OnlySubnetRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VPC1NATGW1

  VPC1PrivateDefaultRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPC1IPv6OnlySubnetRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VPC1NATGW2

  VPC1PrivateDefaultRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPC1IPv6OnlySubnetRouteTable2
      DestinationIpv6CidrBlock: 64:ff9b::/96
      NatGatewayId: !Ref VPC1NATGW2

  VPC1PrivateDefaultIPv6Route1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPC1IPv4OnlySubnetRouteTable1
      DestinationIpv6CidrBlock: ::/0
      EgressOnlyInternetGatewayId: !Ref VPC1EIGW

  VPC1PrivateDefaultIPv6Route2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPC1IPv6OnlySubnetRouteTable2
      DestinationIpv6CidrBlock: ::/0
      EgressOnlyInternetGatewayId: !Ref VPC1EIGW

  # VPC2 Public Routes
  VPC2PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPC2IGWAttachment
    Properties:
      RouteTableId: !Ref VPC2PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPC2IGW

  VPC2PublicDefaultIPv6Route:
    Type: AWS::EC2::Route
    DependsOn: VPC2IGWAttachment
    Properties:
      RouteTableId: !Ref VPC2PublicRouteTable
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref VPC2IGW

  # VPC2 Private Routes
  VPC2PrivateDefaultRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPC2IPv4OnlySubnetRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VPC2NATGW1

  VPC2PrivateDefaultRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPC2DualStackSubnetRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VPC2NATGW2

  VPC2PrivateDefaultRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPC2DualStackSubnetRouteTable2
      DestinationIpv6CidrBlock: 64:ff9b::/96
      NatGatewayId: !Ref VPC2NATGW2

  VPC2PrivateDefaultIPv6Route1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPC2IPv4OnlySubnetRouteTable1
      DestinationIpv6CidrBlock: ::/0
      EgressOnlyInternetGatewayId: !Ref VPC2EIGW

  VPC2PrivateDefaultIPv6Route2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPC2DualStackSubnetRouteTable2
      DestinationIpv6CidrBlock: ::/0
      EgressOnlyInternetGatewayId: !Ref VPC2EIGW

  # ---------- VPC Endpoints ----------
  VPC1SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref VPC1
      SubnetIds:
        - !Ref VPC1EndpointsSubnet1
        - !Ref VPC1EndpointsSubnet2
      SecurityGroupIds:
        - !Ref VPC1EndpointsSecurityGroup
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:PrincipalAccount': !Ref 'AWS::AccountId'

  VPC1SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref VPC1
      SubnetIds:
        - !Ref VPC1EndpointsSubnet1
        - !Ref VPC1EndpointsSubnet2
      SecurityGroupIds:
        - !Ref VPC1EndpointsSecurityGroup
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:PrincipalAccount': !Ref 'AWS::AccountId'

  VPC1EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref VPC1
      SubnetIds:
        - !Ref VPC1EndpointsSubnet1
        - !Ref VPC1EndpointsSubnet2
      SecurityGroupIds:
        - !Ref VPC1EndpointsSecurityGroup
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:PrincipalAccount': !Ref 'AWS::AccountId'

  VPC2SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref VPC2
      SubnetIds:
        - !Ref VPC2EndpointsSubnet1
        - !Ref VPC2EndpointsSubnet2
      SecurityGroupIds:
        - !Ref VPC2EndpointsSecurityGroup
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:PrincipalAccount': !Ref 'AWS::AccountId'

  VPC2SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref VPC2
      SubnetIds:
        - !Ref VPC2EndpointsSubnet1
        - !Ref VPC2EndpointsSubnet2
      SecurityGroupIds:
        - !Ref VPC2EndpointsSecurityGroup
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:PrincipalAccount': !Ref 'AWS::AccountId'
   
  VPC2EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref VPC2
      SubnetIds:
        - !Ref VPC2EndpointsSubnet1
        - !Ref VPC2EndpointsSubnet2
      SecurityGroupIds:
        - !Ref VPC2EndpointsSecurityGroup
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:PrincipalAccount': !Ref 'AWS::AccountId'

  # ---------- IAM Roles ----------
  EC2SSMIAMRoleWorkloads:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  EC2SSMInstanceProfileWorkloads:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2SSMIAMRoleWorkloads


  EC2DescribeManagedPrefixListsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy for EC2 describe managed prefix lists"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: ec2:DescribeManagedPrefixLists
            Resource: '*'

  CustomEC2DescribePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy for EC2 describe actions needed by Lambda functions"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: ec2:Describe*
            Resource: '*'

  # ---------- EC2 Instances ----------
  VPC1IPv4Instance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - VPC1SSMEndpoint
      - VPC1SSMMessagesEndpoint
      - VPC1EC2MessagesEndpoint
    Properties:
      InstanceType: t3.micro
      EbsOptimized: true
      Monitoring: true
      IamInstanceProfile: !Ref EC2SSMInstanceProfileWorkloads
      ImageId: !Ref LatestAmiId
      SecurityGroupIds:
        - !Ref VPC1InstanceSecurityGroup
      SubnetId: !Ref VPC1IPv4OnlySubnet
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Hello from Application-1's version-1. This instance is deployed in an IPv4 only subnet." > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: VPC1-IPv4-Only-Instance

  VPC1IPv6Instance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - VPC1SSMEndpoint
      - VPC1SSMMessagesEndpoint
      - VPC1EC2MessagesEndpoint
    Properties:
      InstanceType: t3.micro
      EbsOptimized: true
      Monitoring: true
      IamInstanceProfile: !Ref EC2SSMInstanceProfileWorkloads
      ImageId: !Ref LatestAmiId
      SecurityGroupIds:
        - !Ref VPC1InstanceSecurityGroup
      SubnetId: !Ref VPC1IPv6OnlySubnet
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Hello from Application-1's version-2. This instance is deployed in an IPv6 only subnet." > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: VPC1-IPv6-Only-Instance

  VPC2IPv4Instance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - VPC2SSMEndpoint
      - VPC2SSMMessagesEndpoint
      - VPC2EC2MessagesEndpoint
    Properties:
      InstanceType: t3.micro
      EbsOptimized: true
      Monitoring: true
      IamInstanceProfile: !Ref EC2SSMInstanceProfileWorkloads
      ImageId: !Ref LatestAmiId
      SecurityGroupIds:
        - !Ref VPC2InstanceSecurityGroup
      SubnetId: !Ref VPC2IPv4OnlySubnet
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Hello from Application-2's version-1. This instance is deployed in an IPv4 only subnet." > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: VPC2-IPv4-Only-Instance

  VPC2DualStackInstance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - VPC2SSMEndpoint
      - VPC2SSMMessagesEndpoint
      - VPC2EC2MessagesEndpoint
    Properties:
      InstanceType: t3.micro
      EbsOptimized: true
      Monitoring: true
      IamInstanceProfile: !Ref EC2SSMInstanceProfileWorkloads
      ImageId: !Ref LatestAmiId
      SecurityGroupIds:
        - !Ref VPC2InstanceSecurityGroup
      SubnetId: !Ref VPC2DualStackSubnet
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Hello from Application-2's version-2. This instance is deployed in a dual stack subnet." > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: VPC2-Dual-Stack-Instance

  # ---------- Lambda Resources ----------
  LambdaBasicExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref CustomEC2DescribePolicy
      Tags:
        - Key: Name
          Value: IPv6-Lambda-Role

  CustomFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "CustomFunction-${AWS::StackName}"
      Handler: index.lambda_handler
      ReservedConcurrentExecutions: 5
      Description: "Retrieves IPv6 address of EC2 instance"
      Timeout: 30
      MemorySize: 128
      Role: !GetAtt LambdaBasicExecutionRole.Arn
      Runtime: python3.11
      Environment:
        Variables:
          LOG_LEVEL: INFO
      Code:
        ZipFile: |
          import json
          import logging
          import cfnresponse
          import boto3
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info(f'Event received: {json.dumps(event, default=str)}')
              logger.info(f'Context: {context}')
              try:
                  responseData = {}
                  if event['RequestType'] == 'Delete':
                      logger.info('Processing Delete operation')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  
                  if event['RequestType'] in ["Create", "Update"]:
                      ResourceRef = event['ResourceProperties']['ResourceRef']
                      logger.info(f'Processing {event["RequestType"]} for instance: {ResourceRef}')
                      
                      ec2 = boto3.client('ec2')
                      logger.info('Calling describe_network_interfaces')
                      response = ec2.describe_network_interfaces(
                          Filters=[{'Name': 'attachment.instance-id', 'Values': [ResourceRef]}]
                      )
                      logger.info(f'EC2 response: {json.dumps(response, default=str)}')
                      
                      if response['NetworkInterfaces']:
                          eni = response['NetworkInterfaces'][0]
                          logger.info(f'Found ENI: {eni.get("NetworkInterfaceId")}')
                          ipv6_addresses = eni.get('Ipv6Addresses', [])
                          logger.info(f'IPv6 addresses found: {ipv6_addresses}')
                          
                          if ipv6_addresses:
                              responseData['Ipv6Address'] = ipv6_addresses[0]['Ipv6Address']
                              logger.info(f"Success - IPv6 address: {responseData['Ipv6Address']}")
                              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                              return
                          else:
                              logger.warning('No IPv6 addresses found on ENI')
                      else:
                          logger.warning('No network interfaces found for instance')
                      
                      raise Exception(f"No IPv6 address found for instance {ResourceRef}")
                  
                  logger.warning(f'Unexpected RequestType: {event.get("RequestType")}')
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              
              except Exception as err:
                  logger.error(f'Error in lambda_handler: {str(err)}', exc_info=True)
                  responseData = {"Error": str(err)}
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData)

  CustomIpv6Resource1:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomFunction.Arn
      ResourceRef: !Ref VPC1IPv6Instance

  CustomIpv6Resource2:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomFunction.Arn
      ResourceRef: !Ref VPC2DualStackInstance

  LatticeInfoFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref EC2DescribeManagedPrefixListsPolicy

  LatticeInfoFunction:
    Type: AWS::Lambda::Function
    DependsOn: LatticeInfoFunctionLogGroup
    Properties:
      FunctionName: !Sub "LatticeInfoFunction-${AWS::StackName}"
      Handler: index.handler
      ReservedConcurrentExecutions: 5
      Role: !GetAtt LatticeInfoFunctionRole.Arn
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          LOG_LEVEL: INFO
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def handler(event, context):
              logger.info(f'Event received: {json.dumps(event, default=str)}')
              logger.info(f'AWS Region: {boto3.Session().region_name}')
              
              if event['RequestType'] in ['Create', 'Update']:
                  logger.info(f'Processing {event["RequestType"]} request')
                  ec2 = boto3.client('ec2')
                  try:
                      logger.info('Calling describe_managed_prefix_lists for VPC Lattice')
                      response = ec2.describe_managed_prefix_lists(
                          Filters=[
                              {
                                  'Name': 'prefix-list-name',
                                  'Values': ['com.amazonaws.*.vpc-lattice']
                              }
                          ]
                      )
                      logger.info(f"API response: {json.dumps(response, default=str)}")
                      
                      prefix_lists = response.get('PrefixLists', [])
                      logger.info(f"Found {len(prefix_lists)} prefix lists")
                      
                      ipv4_pl = None
                      ipv6_pl = None
                      
                      for pl in prefix_lists:
                          name = pl.get('PrefixListName', '')
                          pl_id = pl.get('PrefixListId', '')
                          logger.info(f"Processing prefix list: {name} -> {pl_id}")
                          
                          if 'ipv6' in name.lower():
                              ipv6_pl = pl_id
                              logger.info(f"Found IPv6 prefix list: {ipv6_pl}")
                          else:
                              ipv4_pl = pl_id
                              logger.info(f"Found IPv4 prefix list: {ipv4_pl}")
                      
                      if not ipv4_pl or not ipv6_pl:
                          error_msg = f"Missing prefix lists. IPv4: {ipv4_pl}, IPv6: {ipv6_pl}. Region may not support VPC Lattice."
                          logger.error(error_msg)
                          raise Exception(error_msg)
                          
                      responseData = {
                          'IPv4PrefixList': ipv4_pl,
                          'IPv6PrefixList': ipv6_pl
                      }
                      logger.info(f"Success - sending response: {responseData}")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  except Exception as e:
                      logger.error(f"Error in handler: {str(e)}", exc_info=True)
                      cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})
              else:
                  logger.info(f'Processing {event.get("RequestType", "Unknown")} request - no action needed')
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

  LatticeInfoResource:
    Type: Custom::LatticeInfo
    DependsOn: LatticeInfoFunction
    Properties:
      ServiceToken: !GetAtt LatticeInfoFunction.Arn

  NATGatewayInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "NATGatewayInfoFunction-${AWS::StackName}"
      Handler: index.lambda_handler
      ReservedConcurrentExecutions: 5
      Role: !GetAtt LambdaBasicExecutionRole.Arn
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          LOG_LEVEL: INFO
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import urllib.request
          from datetime import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          class DateTimeEncoder(json.JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, datetime):
                      return obj.isoformat()
                  return super().default(obj)

          def send_response(event, context, response_status, response_data, physical_resource_id=None, no_echo=False):
              response_url = event['ResponseURL']

              logger.info(f"ResponseURL: {response_url}")

              response_body = {
                  'Status': response_status,
                  'Reason': f"See the details in CloudWatch Log Stream: {context.log_stream_name}",
                  'PhysicalResourceId': physical_resource_id or context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'NoEcho': no_echo,
                  'Data': response_data
              }

              json_response_body = json.dumps(response_body, cls=DateTimeEncoder)
              logger.info(f"Response body: {json_response_body}")

              headers = {
                  'content-type': '',
                  'content-length': str(len(json_response_body))
              }

              try:
                  req = urllib.request.Request(response_url,
                                            data=json_response_body.encode('utf-8'),
                                            headers=headers,
                                            method='PUT')
                  response = urllib.request.urlopen(req)
                  logger.info(f"Status code: {response.getcode()}")
                  return True
              except Exception as e:
                  logger.error(f"send_response failed: {str(e)}")
                  return False

          def lambda_handler(event, context):
              logger.info(f"Received event: {json.dumps(event, cls=DateTimeEncoder)}")
              
              if event['RequestType'] == 'Delete':
                  logger.info("Request Type is Delete; sending SUCCESS response")
                  send_response(event, context, 'SUCCESS', {})
                  return
              
              try:
                  nat_gateway_id = event['ResourceProperties']['NatGatewayId']
                  logger.info(f"Looking up NAT Gateway: {nat_gateway_id}")
                  
                  ec2 = boto3.client('ec2')
                  
                  response = ec2.describe_nat_gateways(NatGatewayIds=[nat_gateway_id])
                  logger.info(f"NAT Gateway response: {json.dumps(response, cls=DateTimeEncoder)}")
                  
                  if not response['NatGateways']:
                      raise Exception(f"NAT Gateway {nat_gateway_id} not found")
                  
                  nat_gateway = response['NatGateways'][0]
                  
                  if nat_gateway['State'] != 'available':
                      raise Exception(f"NAT Gateway {nat_gateway_id} is not available. Current state: {nat_gateway['State']}")
                  
                  if not nat_gateway['NatGatewayAddresses']:
                      raise Exception(f"NAT Gateway {nat_gateway_id} has no addresses")
                  
                  private_ip = nat_gateway['NatGatewayAddresses'][0]['PrivateIp']
                  logger.info(f"Found private IP: {private_ip}")
                  
                  send_response(event, context, 'SUCCESS', {'PrivateIp': private_ip})
                  
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  send_response(event, context, 'FAILED', {'Error': str(e)})





  NATGW1PrivateIP:
    Type: Custom::NATGatewayInfo
    DependsOn: VPC1NATGW1
    Properties:
      ServiceToken: !GetAtt NATGatewayInfoFunction.Arn
      NatGatewayId: !Ref VPC1NATGW1

  NATGW2PrivateIP:
    Type: Custom::NATGatewayInfo
    DependsOn: VPC1NATGW2
    Properties:
      ServiceToken: !GetAtt NATGatewayInfoFunction.Arn
      NatGatewayId: !Ref VPC1NATGW2

  NATGW3PrivateIP:
    Type: Custom::NATGatewayInfo
    DependsOn: VPC2NATGW1
    Properties:
      ServiceToken: !GetAtt NATGatewayInfoFunction.Arn
      NatGatewayId: !Ref VPC2NATGW1

  NATGW4PrivateIP:
    Type: Custom::NATGatewayInfo
    DependsOn: VPC2NATGW2
    Properties:
      ServiceToken: !GetAtt NATGatewayInfoFunction.Arn
      NatGatewayId: !Ref VPC2NATGW2




  # ---------- VPC Lattice Resources ----------
  ServiceNetwork:
    Type: AWS::VpcLattice::ServiceNetwork
    DeletionPolicy: Delete
    Properties:
      Name: ipv6-day-service-network
      AuthType: AWS_IAM
      Tags:
        - Key: Name
          Value: ipv6-day-service-network

  ServiceNetworkAuthPolicy:
    Type: AWS::VpcLattice::AuthPolicy
    DeletionPolicy: Delete
    Properties:
      ResourceIdentifier: !Ref ServiceNetwork
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'

  LatticeApp1SNAssociation:
    Type: AWS::VpcLattice::ServiceNetworkVpcAssociation
    Properties:
      SecurityGroupIds:
        - !Ref VPC1LatticeSecurityGroup
      ServiceNetworkIdentifier: !Ref ServiceNetwork
      VpcIdentifier: !Ref VPC1

  LatticeApp2SNAssociation:
    Type: AWS::VpcLattice::ServiceNetworkVpcAssociation
    Properties:
      SecurityGroupIds:
        - !Ref VPC2LatticeSecurityGroup
      ServiceNetworkIdentifier: !Ref ServiceNetwork
      VpcIdentifier: !Ref VPC2

  App1ServiceNetworkAssociation:
    Type: AWS::VpcLattice::ServiceNetworkServiceAssociation
    Properties:
      ServiceNetworkIdentifier: !Ref ServiceNetwork
      ServiceIdentifier: !Ref App1

  App2ServiceNetworkAssociation:
    Type: AWS::VpcLattice::ServiceNetworkServiceAssociation
    Properties:
      ServiceNetworkIdentifier: !Ref ServiceNetwork
      ServiceIdentifier: !Ref App2


  App1IPv4TargetGroup:
    Type: AWS::VpcLattice::TargetGroup
    DeletionPolicy: Delete
    Properties:
      Name: app-1-ipv4-targets
      Type: INSTANCE
      Config:
        Protocol: HTTP
        Port: 80
        ProtocolVersion: HTTP1
        VpcIdentifier: !Ref VPC1
        HealthCheck:
          Enabled: false
      Targets:
        - Id: !Ref VPC1IPv4Instance
          Port: 80

  App2IPv4TargetGroup:
    Type: AWS::VpcLattice::TargetGroup
    DeletionPolicy: Delete
    Properties:
      Name: app-2-ipv4-targets
      Type: INSTANCE
      Config:
        Protocol: HTTP
        Port: 80
        ProtocolVersion: HTTP1
        VpcIdentifier: !Ref VPC2
        HealthCheck:
          Enabled: false
      Targets:
        - Id: !Ref VPC2IPv4Instance
          Port: 80

  App1IPv6TargetGroup:
    Type: AWS::VpcLattice::TargetGroup
    DeletionPolicy: Delete
    Properties:
      Name: app-1-ipv6-targets
      Type: IP
      Config:
        Protocol: HTTP
        Port: 80
        ProtocolVersion: HTTP1
        VpcIdentifier: !Ref VPC1
        IpAddressType: "IPV6"
        HealthCheck:
          Enabled: false
      Targets:
        - Id: !GetAtt CustomIpv6Resource1.Ipv6Address
          Port: 80

  App2IPv6TargetGroup:
    Type: AWS::VpcLattice::TargetGroup
    DeletionPolicy: Delete
    Properties:
      Name: app-2-dual-stack-target
      Type: IP
      Config:
        Protocol: HTTP
        Port: 80
        ProtocolVersion: HTTP1
        VpcIdentifier: !Ref VPC2
        IpAddressType: "IPV6"
        HealthCheck:
          Enabled: false
      Targets:
        - Id: !GetAtt CustomIpv6Resource2.Ipv6Address
          Port: 80

  App1:
    Type: AWS::VpcLattice::Service
    DeletionPolicy: Delete
    Properties:
      Name: app-1
      AuthType: NONE

  App2:
    Type: AWS::VpcLattice::Service
    DeletionPolicy: Delete
    Properties:
      Name: app-2
      AuthType: NONE
  
  App1AccessLogSubscription:
    Type: AWS::VpcLattice::AccessLogSubscription
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      ResourceIdentifier: !Ref App1
      DestinationArn: !GetAtt App1ServiceLogGroup.Arn

  App2AccessLogSubscription:
    Type: AWS::VpcLattice::AccessLogSubscription
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      ResourceIdentifier: !Ref App2
      DestinationArn: !GetAtt App2ServiceLogGroup.Arn

  
  App1Listener:
    Type: AWS::VpcLattice::Listener
    DeletionPolicy: Delete
    DependsOn:
      - App1IPv4TargetGroup
      - App1IPv6TargetGroup
    Properties:
      ServiceIdentifier: !Ref App1
      Protocol: HTTP
      Port: 80
      DefaultAction:
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref App1IPv4TargetGroup
              Weight: 100

  App2Listener:
    Type: AWS::VpcLattice::Listener
    DeletionPolicy: Delete
    DependsOn:
      - App2IPv4TargetGroup
      - App2IPv6TargetGroup
    Properties:
      ServiceIdentifier: !Ref App2
      Protocol: HTTP
      Port: 80
      DefaultAction:
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref App2IPv4TargetGroup
              Weight: 100
  
  App1AuthPolicy:
    Type: AWS::VpcLattice::AuthPolicy
    DeletionPolicy: Delete
    Properties:
      ResourceIdentifier: !Ref App1
      Policy:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'

  App2AuthPolicy:
    Type: AWS::VpcLattice::AuthPolicy
    DeletionPolicy: Delete
    Properties:
      ResourceIdentifier: !Ref App2
      Policy:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'

  # ---------- Log Groups ----------
  VPCFlowLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/vpc/VPC-Flow-Logs/${AWS::Region}"
      RetentionInDays: 3
      Tags:
        - Key: Name
          Value: VPC-Flow-Logs

  App1ServiceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/vpc-lattice/lattice-app-1-lg/${AWS::Region}"
      RetentionInDays: 3
      Tags:
        - Key: Name
          Value: lattice-app-1-lg

  App2ServiceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/vpc-lattice/lattice-app-2-lg/${AWS::Region}"
      RetentionInDays: 3
      Tags:
        - Key: Name
          Value: lattice-app-2-lg

  LatticeServiceLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/vpc-lattice/VPC-Lattice-Service-Logs/${AWS::Region}"
      RetentionInDays: 3
      Tags:
        - Key: Name
          Value: VPC-Lattice-Service-Logs

  CustomFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/CustomFunction-${AWS::StackName}"
      RetentionInDays: 3
      Tags:
        - Key: Name
          Value: custom-function-logs

  LatticeInfoFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/LatticeInfoFunction-${AWS::StackName}"
      RetentionInDays: 3
      Tags:
        - Key: Name
          Value: lattice-info-function-logs

  NATGatewayInfoFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/NATGatewayInfoFunction-${AWS::StackName}"
      RetentionInDays: 3
      Tags:
        - Key: Name
          Value: natgateway-info-function-logs


Outputs:
  VPCInformation:
    Description: VPC Information
    Value: !Sub |
      VPC1:
        ID: ${VPC1}
        CIDR: 10.1.0.0/16
        IPv6: ${VPC1IPv6CIDR}
      VPC2:
        ID: ${VPC2}
        CIDR: 10.2.0.0/16
        IPv6: ${VPC2IPv6CIDR}

  NATGatewayIPs:
    Description: NAT Gateway Private IPs
    Value: !Sub |
      VPC1:
        NATGW1: ${NATGW1PrivateIP.PrivateIp}
        NATGW2: ${NATGW2PrivateIP.PrivateIp}
      VPC2:
        NATGW1: ${NATGW3PrivateIP.PrivateIp}
        NATGW2: ${NATGW4PrivateIP.PrivateIp}

  SubnetInformation:
    Description: Subnet Information
    Value: !Sub |
      VPC1 Subnets:
        Public AZ1: ${VPC1PublicSubnet1}
        Public AZ2: ${VPC1PublicSubnet2}
        Private AZ1: ${VPC1IPv4OnlySubnet}
        Private AZ2: ${VPC1IPv6OnlySubnet}
      VPC2 Subnets:
        Public AZ1: ${VPC2PublicSubnet1}
        Public AZ2: ${VPC2PublicSubnet2}
        Private AZ1: ${VPC2IPv4OnlySubnet}
        Private AZ2: ${VPC2DualStackSubnet}

  NetworkingResources:
    Description: Networking Resources
    Value: !Sub |
      NAT Gateways:
        VPC1 AZ1: ${VPC1NATGW1}
        VPC1 AZ2: ${VPC1NATGW2}
        VPC2 AZ1: ${VPC2NATGW1}
        VPC2 AZ2: ${VPC2NATGW2}
      Route Tables:
        VPC1 Public: ${VPC1PublicRouteTable}
        VPC1 Private AZ1: ${VPC1IPv4OnlySubnetRouteTable1}
        VPC1 Private AZ2: ${VPC1IPv6OnlySubnetRouteTable2}
        VPC2 Public: ${VPC2PublicRouteTable}
        VPC2 Private AZ1: ${VPC2IPv4OnlySubnetRouteTable1}
        VPC2 Private AZ2: ${VPC2DualStackSubnetRouteTable2}

  SecurityGroups:
    Description: Security Group Information
    Value: !Sub |
      VPC1:
        Instance SG: ${VPC1InstanceSecurityGroup}
        Endpoints SG: ${VPC1EndpointsSecurityGroup}
        Lattice SG: ${VPC1LatticeSecurityGroup}
      VPC2:
        Instance SG: ${VPC2InstanceSecurityGroup}
        Endpoints SG: ${VPC2EndpointsSecurityGroup}
        Lattice SG: ${VPC2LatticeSecurityGroup}

  EC2Instances:
    Description: EC2 Instance Information
    Value: !Sub |
      VPC1:
        IPv4 Instance:
          ID: ${VPC1IPv4Instance}
          Private IP: ${VPC1IPv4Instance.PrivateIp}
        IPv6 Instance:
          ID: ${VPC1IPv6Instance}
          IPv6: ${CustomIpv6Resource1.Ipv6Address}
      VPC2:
        IPv4 Instance:
          ID: ${VPC2IPv4Instance}
          Private IP: ${VPC2IPv4Instance.PrivateIp}
        Dual Stack Instance:
          ID: ${VPC2DualStackInstance}
          IPv6: ${CustomIpv6Resource2.Ipv6Address}

  VPCEndpoints:
    Description: VPC Endpoint Information
    Value: !Sub |
      VPC1:
        SSM: ${VPC1SSMEndpoint}
        SSMMessages: ${VPC1SSMMessagesEndpoint}
        EC2Messages: ${VPC1EC2MessagesEndpoint}
      VPC2:
        SSM: ${VPC2SSMEndpoint}
        SSMMessages: ${VPC2SSMMessagesEndpoint}
        EC2Messages: ${VPC2EC2MessagesEndpoint}

  LatticeResources:
    Description: VPC Lattice Resource Information
    Value: !Sub |
      Service Network: ${ServiceNetwork}
      Services:
        Service 1: ${App1}
        Service 2: ${App2}
      VPC Associations:
        VPC1: ${LatticeApp1SNAssociation}
        VPC2: ${LatticeApp2SNAssociation}

  SSMConnectCommands:
    Description: SSM Session Manager Connection Commands
    Value: !Sub |
      VPC1:
        IPv4 Instance: aws ssm start-session --target ${VPC1IPv4Instance}
        IPv6 Instance: aws ssm start-session --target ${VPC1IPv6Instance}
      VPC2:
        IPv4 Instance: aws ssm start-session --target ${VPC2IPv4Instance}
        Dual Stack Instance: aws ssm start-session --target ${VPC2DualStackInstance}

  LogGroups:
    Description: CloudWatch Log Group Information
    Value: !Sub |
      VPC Flow Logs: ${VPCFlowLogsGroup}
      Lattice Service Logs: ${LatticeServiceLogsGroup}
